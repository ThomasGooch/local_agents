name: Test

on:
  workflow_run:
    workflows: ["Build"]
    types: [completed]
    branches: [ main ]
  workflow_call:
    # Allow manual triggering and calling from other workflows

jobs:
  # Check if build was successful before running tests
  check-build:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      build-success: ${{ steps.check.outputs.success }}
    steps:
    - name: Check build status
      id: check
      run: |
        echo "Build workflow completed successfully"
        echo "success=true" >> $GITHUB_OUTPUT

  # Code quality checks
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: check-build
    if: needs.check-build.outputs.build-success == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-3.11-
          
    - name: Install dependencies
      run: poetry install --with dev
        
    - name: Run linting
      run: |
        poetry run flake8 src/local_agents tests --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run black --check src/ tests/
        poetry run isort --check-only src/ tests/

  # Unit tests
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [check-build, lint]
    if: needs.check-build.outputs.build-success == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-3.11-
          
    - name: Install dependencies
      run: poetry install --with dev
        
    - name: Run unit tests
      run: |
        poetry run pytest tests/unit -v --tb=short --timeout=30 --maxfail=5 --cov=src/local_agents --cov-report=xml
        
    - name: Upload coverage
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [check-build, unit-tests]
    if: needs.check-build.outputs.build-success == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-3.11-
          
    - name: Install dependencies
      run: poetry install --with dev
        
    - name: Run integration tests  
      run: |
        poetry run pytest tests/integration -v --tb=short --timeout=60 --maxfail=3

  # Security and type checking (only on main branch)
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    if: needs.check-build.outputs.build-success == 'true' && github.event.workflow_run.ref == 'refs/heads/main'
    needs: [check-build, lint, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-3.11-
          
    - name: Install dependencies
      run: poetry install --with dev
        
    - name: Type checking
      run: |
        poetry run mypy src/local_agents --ignore-missing-imports || true
        
    - name: Security scanning
      run: |
        poetry run bandit -r src/local_agents -ll || true
        poetry run safety check || true